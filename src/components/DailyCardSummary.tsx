import React, { useState, useEffect } from 'react';
import { Calendar, CreditCard, Download, RefreshCw, FileText, TrendingUp, DollarSign } from 'lucide-react';
import { dbHelpers } from '../lib/supabase';
import toast from 'react-hot-toast';

interface DailyTransaction {
  id: string;
  cardId: string;
  cardName: string;
  cardType: string;
  bankName?: string;
  amount: number;
  serviceName: string;
  clientName: string;
  clientType: 'company' | 'individual';
  invoiceNumber?: string;
  serviceDate: string;
  createdAt: string;
  status: string;
}

interface DailyCardSummary {
  date: string;
  cards: Array<{
    cardId: string;
    cardName: string;
    creditLimit: number;
    dailyUsage: number;
    totalUsed: number;
    remainingBalance: number;
    utilizationPercentage: number;
    transactionCount: number;
  }>;
  totals: {
    dailyUsage: number;
    transactionCount: number;
    availableCredit: number;
    cardsUsed: number;
  };
}

interface DailyCardSummaryProps {
  selectedDate?: string;
  onDateChange?: (date: string) => void;
  showTitle?: boolean;
  compact?: boolean;
}

const DailyCardSummaryComponent: React.FC<DailyCardSummaryProps> = ({
  selectedDate,
  onDateChange,
  showTitle = true,
  compact = false
}) => {
  const [summary, setSummary] = useState<DailyCardSummary | null>(null);
  const [transactions, setTransactions] = useState<DailyTransaction[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [currentDate, setCurrentDate] = useState(selectedDate || new Date().toISOString().split('T')[0]);
  const [showTransactions, setShowTransactions] = useState(false);

  useEffect(() => {
    loadDailySummary();
  }, [currentDate]);

  const loadDailySummary = async () => {
    try {
      setLoading(true);
      const [summaryData, transactionsData] = await Promise.all([
        dbHelpers.getDailyCardSummary(currentDate),
        dbHelpers.getTodayCardTransactions()
      ]);
      
      setSummary(summaryData);
      setTransactions(transactionsData.filter(t => t.serviceDate === currentDate));
    } catch (error) {
      console.error('Error loading daily summary:', error);
      toast.error('Failed to load daily summary');
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    try {
      setRefreshing(true);
      await loadDailySummary();
      toast.success('Daily summary refreshed');
    } catch (error) {
      console.error('Error refreshing daily summary:', error);
      toast.error('Failed to refresh daily summary');
    } finally {
      setRefreshing(false);
    }
  };

  const handleDateChange = (date: string) => {
    setCurrentDate(date);
    onDateChange?.(date);
  };

  const generateDayCloseReport = async () => {
    try {
      const reportData = await dbHelpers.generateDayCloseReport(currentDate);

      const reportContent = `
COMPREHENSIVE DAILY CARD USAGE REPORT
Date: ${new Date(currentDate).toLocaleDateString()}
Generated: ${new Date().toLocaleString()}

=== EXECUTIVE SUMMARY ===
Total Credit Limit: AED ${reportData.totals.totalCreditLimit.toLocaleString()}
Total Opening Balance: AED ${reportData.totals.totalOpeningBalance.toLocaleString()}
Total Daily Usage: AED ${reportData.totals.totalDailyUsage.toLocaleString()}
Total Closing Balance: AED ${reportData.totals.totalClosingBalance.toLocaleString()}
Total Transactions: ${reportData.totals.totalTransactions}
Cards Used: ${reportData.totals.cardsUsed}

=== CARD-BY-CARD BREAKDOWN ===
${reportData.cards.map(card => `
Card: ${card.cardName} (${card.cardType})
${card.bankName ? `Bank: ${card.bankName}` : ''}
Credit Limit: AED ${card.creditLimit.toLocaleString()}
Opening Balance: AED ${card.openingBalance.toLocaleString()}
Daily Usage: AED ${card.dailyUsage.toLocaleString()}
Closing Balance: AED ${card.closingBalance.toLocaleString()}
Transactions Today: ${card.transactionCount}
Utilization: ${((card.closingUsage / card.creditLimit) * 100).toFixed(1)}%
`).join('\n')}

=== DETAILED TRANSACTION LOG ===
${reportData.transactions.map(t => `
Invoice: ${t.invoiceNumber || 'N/A'}
Card: ${t.cardName}
Client: ${t.clientName} (${t.clientType})
Service: ${t.serviceName}
Amount: AED ${t.amount.toLocaleString()}
Time: ${new Date(t.createdAt).toLocaleTimeString()}
`).join('\n')}

=== OPENING VS CLOSING COMPARISON ===
${reportData.cards.map(card => `
${card.cardName}:
  Opening: AED ${card.openingBalance.toLocaleString()} available
  Closing: AED ${card.closingBalance.toLocaleString()} available
  Change: AED ${(card.openingBalance - card.closingBalance).toLocaleString()} used
`).join('\n')}

Report End - Generated by Servigence Card Management System
      `;

      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `day-close-report-${currentDate}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      toast.success('Comprehensive day close report downloaded');
    } catch (error) {
      console.error('Error generating day close report:', error);
      toast.error('Failed to generate day close report');
    }
  };

  const formatCurrency = (amount: number) => {
    return `AED ${amount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  };

  const isToday = currentDate === new Date().toISOString().split('T')[0];

  if (loading) {
    return (
      <div className="bg-white rounded-xl border border-gray-200 p-6">
        {showTitle && (
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-gray-900">Daily Card Summary</h2>
          </div>
        )}
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl border border-gray-200 p-6">
      {showTitle && (
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-gray-900">Daily Card Summary</h2>
          <div className="flex items-center space-x-2">
            <button
              onClick={handleRefresh}
              disabled={refreshing}
              className="flex items-center space-x-1 px-3 py-1 text-sm text-blue-600 hover:text-blue-800 transition-colors"
            >
              <RefreshCw className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />
              <span>Refresh</span>
            </button>
            {summary && summary.totals.transactionCount > 0 && (
              <button
                onClick={generateDayCloseReport}
                className="flex items-center space-x-1 px-3 py-1 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Download className="w-4 h-4" />
                <span>Day Close</span>
              </button>
            )}
          </div>
        </div>
      )}

      {/* Date Selector */}
      <div className="flex items-center space-x-4 mb-6">
        <div className="flex items-center space-x-2">
          <Calendar className="w-5 h-5 text-gray-500" />
          <input
            type="date"
            value={currentDate}
            onChange={(e) => handleDateChange(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        {isToday && (
          <span className="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
            Today
          </span>
        )}
      </div>

      {!summary || summary.totals.transactionCount === 0 ? (
        <div className="text-center py-12">
          <CreditCard className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No card transactions found for {new Date(currentDate).toLocaleDateString()}</p>
        </div>
      ) : (
        <>
          {/* Summary Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-blue-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-blue-600">Daily Usage</p>
                  <p className="text-lg font-bold text-blue-900">{formatCurrency(summary.totals.dailyUsage)}</p>
                </div>
                <DollarSign className="w-8 h-8 text-blue-600" />
              </div>
            </div>
            <div className="bg-green-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-green-600">Transactions</p>
                  <p className="text-lg font-bold text-green-900">{summary.totals.transactionCount}</p>
                </div>
                <FileText className="w-8 h-8 text-green-600" />
              </div>
            </div>
            <div className="bg-purple-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-purple-600">Cards Used</p>
                  <p className="text-lg font-bold text-purple-900">{summary.totals.cardsUsed}</p>
                </div>
                <CreditCard className="w-8 h-8 text-purple-600" />
              </div>
            </div>
            <div className="bg-orange-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-orange-600">Available Credit</p>
                  <p className="text-lg font-bold text-orange-900">{formatCurrency(summary.totals.availableCredit)}</p>
                </div>
                <TrendingUp className="w-8 h-8 text-orange-600" />
              </div>
            </div>
          </div>

          {/* Card Breakdown */}
          <div className="space-y-4 mb-6">
            <h3 className="text-lg font-semibold text-gray-900">Card Breakdown</h3>
            {summary.cards.map((card) => (
              <div key={card.cardId} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-semibold text-gray-900">{card.cardName}</h4>
                  <span className="text-sm text-gray-500">{card.transactionCount} transactions</span>
                </div>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <p className="text-gray-500">Daily Usage</p>
                    <p className="font-semibold text-blue-600">{formatCurrency(card.dailyUsage)}</p>
                  </div>
                  <div>
                    <p className="text-gray-500">Total Used</p>
                    <p className="font-semibold text-gray-900">{formatCurrency(card.totalUsed)}</p>
                  </div>
                  <div>
                    <p className="text-gray-500">Remaining</p>
                    <p className="font-semibold text-green-600">{formatCurrency(card.remainingBalance)}</p>
                  </div>
                  <div>
                    <p className="text-gray-500">Utilization</p>
                    <p className="font-semibold text-gray-900">{card.utilizationPercentage.toFixed(1)}%</p>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Transaction Details Toggle */}
          <div className="border-t pt-4">
            <button
              onClick={() => setShowTransactions(!showTransactions)}
              className="flex items-center space-x-2 text-blue-600 hover:text-blue-800 transition-colors"
            >
              <FileText className="w-4 h-4" />
              <span>{showTransactions ? 'Hide' : 'Show'} Transaction Details ({transactions.length})</span>
            </button>

            {showTransactions && (
              <div className="mt-4 space-y-2">
                {transactions.map((transaction) => (
                  <div key={transaction.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2">
                        <span className="font-medium text-gray-900">{transaction.invoiceNumber || 'N/A'}</span>
                        <span className="text-sm text-gray-500">•</span>
                        <span className="text-sm text-gray-600">{transaction.cardName}</span>
                      </div>
                      <div className="text-sm text-gray-500">
                        {transaction.clientName} • {transaction.serviceName}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-semibold text-gray-900">{formatCurrency(transaction.amount)}</div>
                      <div className="text-xs text-gray-500">
                        {new Date(transaction.createdAt).toLocaleTimeString()}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export default DailyCardSummaryComponent;
